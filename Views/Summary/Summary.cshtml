@model BudgetPortal.ViewModel.MultipleData
@using System.Web;

@using BudgetPortal.ViewModel;
@using Microsoft.AspNetCore.Mvc;

@using Microsoft.AspNetCore.Identity;
@using BudgetPortal.Data;

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Reports";
    int OuterHeaderCount = 0;
    int OuterBodyCount = 0;
    int CountHeader = 0;
    int CounterBody = 0;
    var SumBudEstCurrFin = 0.00;
    var SumActPrevFin = 0.00;
    var SumActCurrFinTill2ndQuart = 0.00;
    var SumRevEstCurrFin = 0.00;
    var SumBudgEstNexFin = 0.00;
    var NextAcademicYear = "";
    String[] SplitAcademicYear = new String[1];
    var TotalAdminSavedLedgers = 0;
    var TotalDelegateSavedLedgers = 0;

    var Sumname1 = String.Concat("BudEstCurrFin", "Total");
    var Sumname2 = String.Concat("ActPrevFin", "Total");
    var Sumname3 = String.Concat("ActCurrFinTillsecondQuart", "Total");
    var Sumname4 = String.Concat("RevEstCurrFin", "Total");
    var Sumname5 = String.Concat("PerVarRevEstOverBudgEstCurrFin", "Total");
    var Sumname6 = String.Concat("ACAndBWPropRECurrFin", "Total");
    var Sumname7 = String.Concat("BudgEstNexFin", "Total");
    var Sumname8 = String.Concat("PerVarRevEstOverBudgEstNxtFin", "Total");
    var Sumname9 = String.Concat("ACAndBWPropRENxtFin", "Total");
    var Sumname10 = String.Concat("Justification", "Total");
    var Sumname11 = String.Concat("PerVarACBWRevEstOverBudgEstCurrFin", "Total");
    var Sumname12 = String.Concat("PerVarACBWRevEstOverBudgEstNxtFin", "Total");
}
<br />

<div id="outerdiv">

    <div style="float:right">

        @Html.AntiForgeryToken()

        <table border="0" cellpadding="5" cellspacing="0">
            <tr>
                
                <td class="w-20">
                    @Html.DropDownListFor(m => m.SelectedAcademicYearID, Model.AcademicYears,"--Please select any Academic Year--",new { @class = "form-control", @id="AcademicYear" })
                    @Html.HiddenFor(m => m.SelectedAcademicYear, new {id="SelectedAcademicYear"})
                    @Html.ValidationMessageFor(Model => Model.SelectedAcademicYearID, "", new { @class = "text-danger" })
                </td>

                @if (User.IsInRole("Admin"))
                {
                    <td>
                        @Html.DropDownListFor(Model => Model.SelectedDivisionID, Model.DivisionNames,"--Please select any Division--", new { @class = "form-control", @id="Division" })
                        @Html.ValidationMessageFor(Model => Model.SelectedDivisionID,null, new { @class = "text-danger" })

                    </td>
                }
            </tr>

        </table>

    </div>
    <div style="float:right;margin:50px">
        @{
            var SelAcademicYear = (from a in Model.AcademicYears where a.Selected == true select a.Text).FirstOrDefault();
            SplitAcademicYear = SelAcademicYear.Split("-");
            
            //var DivType = (from a in Model.DivisionTypeNames where a.Selected == true select a.Text).FirstOrDefault();
        }
    </div>
        <table class="table table-borderless">
            <tr class="text-center" style="color:chocolate;border-bottom:hidden;"><th colspan="100">CENTRAL BOARD OF SECONDARY EDUCATION</th></tr>
            <tr class="text-center" style="color:chocolate;border-bottom:hidden;">
                <th colspan="100">Shiksha Kendra 2, Community Centre, Preet Vihar, Delhi - 110 092</th>
            </tr>
            <tr class="text-center" style="color:green;border-bottom:hidden;">
                <th colspan="100">Summary</th>
            </tr>
            <tr class="text-center" style="color:red;border-bottom:hidden;">
                <th colspan="100">(*FIGURES IN CRORES)</th>
            </tr>
        </table>

        
        <table id="Budget-Summary" class="table table-responsive table-hover table-bordered">

            <thead>
                <tr class="text-center">
                    
                </tr>
                <tr>
                    <th class="w-5">
                        HEAD NO.
                    </th>
                    <th class="w-5">
                        HEAD NAME
                    </th>
                    <th class="CurrentBudgetEstimates w-10">

                    </th>
                    <th class="PreviousActualBudget w-10">

                    </th>
                    <th class="PreviousHalfYearActualBudget w-10">

                    </th>
                    <th class="CurrentYearRevisedEstimates w-10">

                    </th>
                    <th class="VariationInRevisedEstimates w-10">

                    </th>
                    @if (User.IsInRole("Admin"))
                    {
                        <th class="ACBWProposalForRevisedEstimates w-10">

                        </th>
                    }
                    @if (User.IsInRole("Admin"))
                    {
                        <th class="VariationInRevisedEstimates w-10">

                        </th>
                    }
                    <th class="BudgetEstimatesNextYear w-10">

                    </th>
                    <th class="VariationInBudgetEstimates w-10">

                    </th>
                    @if (User.IsInRole("Admin"))
                    {
                        <th class="ACBWProposalForBudgetEstimates w-10">

                        </th>

                    }
                    @if (User.IsInRole("Admin"))
                    {
                        <th class="VariationInBudgetEstimates w-10">

                        </th>

                    }
                    <th class="Status w-10">

                    </th>
                    @if (User.IsInRole("Admin"))
                    {
                        <th class="Remarks w-10">

                        </th>
                    }

                </tr>
            </thead>
            <tbody>
                <tr></tr>
        
      @foreach (var inner in Model.Sectionss)
        {
            var inneridenti = String.Concat("Budget", @inner.SectionNo.ToString());

            

                var SectionSumBudEstCurrFin = (from a in Model.Approved where a.SectionNumber.Equals(@inner.SectionNo) select a.BudEstNextFin).Sum();
                var SectionSumActPrevFin = (from a in Model.Detailss where a.SectionNumber.Equals(@inner.SectionNo) select a.ActPrevFin).Sum();
                var SectionSumActCurrFinTill2ndQuart = (from a in Model.Detailss where a.SectionNumber.Equals(@inner.SectionNo) select a.ActCurrFinTill2ndQuart).Sum();
                var SectionSumRevEstCurrFin = (from a in Model.Detailss where a.SectionNumber.Equals(@inner.SectionNo) select a.RevEstCurrFin).Sum();
                var SectionSumACAndBWPropRECurrFin = (from a in Model.Detailss where a.SectionNumber.Equals(@inner.SectionNo) select a.ACAndBWPropRECurrFin).Sum();
                var SectionSumBudgEstNexFin = (from a in Model.Detailss where a.SectionNumber.Equals(@inner.SectionNo) select a.BudgEstNexFin).Sum();
                var SectionSumACAndBWPropRENxtFin = (from a in Model.Detailss where a.SectionNumber.Equals(@inner.SectionNo) select a.ACAndBWPropRENxtFin).Sum();
                var SectionSumPerVarRevEstOverBudgEstCurrFin = SectionSumBudEstCurrFin != Convert.ToDecimal(0.00) ? Convert.ToDecimal(Convert.ToDecimal((SectionSumRevEstCurrFin - SectionSumBudEstCurrFin) / SectionSumBudEstCurrFin) * 100) : Convert.ToDecimal(0);
                var SectionSumPerVarRevEstOverBudgEstNxtFin = SectionSumRevEstCurrFin != Convert.ToDecimal(0.00) ? Convert.ToDecimal(Convert.ToDecimal((SectionSumBudgEstNexFin - SectionSumRevEstCurrFin) / SectionSumRevEstCurrFin) * 100) : Convert.ToDecimal(0);
                var SectionSumPerVarACBWRevEstOverBudgEstCurrFin = SectionSumBudEstCurrFin != Convert.ToDecimal(0.00) ? Convert.ToDecimal(Convert.ToDecimal((SectionSumACAndBWPropRECurrFin - SectionSumBudEstCurrFin) / SectionSumBudEstCurrFin) * 100) : Convert.ToDecimal(0);
                var SectionSumPerVarACBWRevEstOverBudgEstNxtFin = SectionSumACAndBWPropRECurrFin != Convert.ToDecimal(0.00) ? Convert.ToDecimal(Convert.ToDecimal((SectionSumACAndBWPropRENxtFin - SectionSumACAndBWPropRECurrFin) / SectionSumACAndBWPropRECurrFin) * 100) : Convert.ToDecimal(0);
                 
                //var SelectedDivisionTypeName = (from a in Model.DivisionTypeNames where a.Selected == true select a.Text).FirstOrDefault();

                //<tr><td>@inner.SectionNo - @inner.SectionName</td></tr>
                  
                  @foreach (var item in Model.Groupss.Where(d => d.SectionNo == @inner.SectionNo))
                  {
                    var TotalSubGroups = (from b in Model.SubGroupss where b.GroupNo.Equals(@item.GroupNo) && b.RequireInput == false select b.SubGroupNo).Count();
                    var TotalLedgers = (from c in Model.Ledgerss
                                        join d in Model.SubGroupss
                                        on c.SubGroupNo equals d.SubGroupNo
                                        select c.LedgerNo).Count();
                    TotalSubGroups = (TotalSubGroups + TotalLedgers);
                    
                    @if (User.IsInRole("Admin"))
                    {
                         TotalAdminSavedLedgers = (from e in Model.Detailss where e.SectionNumber.Equals(@inner.SectionNo) && e.GroupNumber.Equals(@item.GroupNo) && e.HasAdminSaved.Equals(true) select e.SubGroupNumber).Count();
                    }
                    else
                    {
                         TotalDelegateSavedLedgers = (from d in Model.Detailss where d.SectionNumber.Equals(@inner.SectionNo) && d.GroupNumber.Equals(@item.GroupNo) && d.HasDelegateSaved.Equals(true) select d.SubGroupNumber).Count();
                    }
                    var GroupSumBudEstCurrFin = (from a in Model.Approved where (a.SectionNumber.Equals(@inner.SectionNo) && a.GroupNumber.Equals(@item.GroupNo)) select a.BudEstNextFin).Sum();
                    var GroupSumActPrevFin = (from a in Model.Detailss where (a.SectionNumber.Equals(@inner.SectionNo) && a.GroupNumber.Equals(@item.GroupNo)) select a.ActPrevFin).Sum();
                    var GroupSumActCurrFinTill2ndQuart = (from a in Model.Detailss where (a.SectionNumber.Equals(@inner.SectionNo) && a.GroupNumber.Equals(@item.GroupNo)) select a.ActCurrFinTill2ndQuart).Sum();
                    var GroupSumRevEstCurrFin = (from a in Model.Detailss where (a.SectionNumber.Equals(@inner.SectionNo) && a.GroupNumber.Equals(@item.GroupNo)) select a.RevEstCurrFin).Sum();
                    var GroupSumACAndBWPropRECurrFin = (from a in Model.Detailss where (a.SectionNumber.Equals(@inner.SectionNo) && a.GroupNumber.Equals(@item.GroupNo)) select a.ACAndBWPropRECurrFin).Sum();
                    var GroupSumBudgEstNexFin = (from a in Model.Detailss where (a.SectionNumber.Equals(@inner.SectionNo) && a.GroupNumber.Equals(@item.GroupNo)) select a.BudgEstNexFin).Sum();
                    var GroupSumACAndBWPropRENxtFin = (from a in Model.Detailss where (a.SectionNumber.Equals(@inner.SectionNo) && a.GroupNumber.Equals(@item.GroupNo)) select a.ACAndBWPropRENxtFin).Sum();
                    var GroupSumPerVarRevEstOverBudgEstCurrFin = GroupSumBudEstCurrFin != Convert.ToDecimal(0.00) ? Convert.ToDecimal(Convert.ToDecimal((GroupSumRevEstCurrFin - GroupSumBudEstCurrFin) / GroupSumBudEstCurrFin) * 100) : Convert.ToDecimal(0);
                    var GroupSumPerVarRevEstOverBudgEstNxtFin = GroupSumRevEstCurrFin != Convert.ToDecimal(0.00) ? Convert.ToDecimal(Convert.ToDecimal((GroupSumBudgEstNexFin - GroupSumRevEstCurrFin) / GroupSumRevEstCurrFin) * 100) : Convert.ToDecimal(0);
                    var GroupSumPerVarACBWRevEstOverBudgEstCurrFin = GroupSumBudEstCurrFin != Convert.ToDecimal(0.00) ? Convert.ToDecimal(Convert.ToDecimal((GroupSumACAndBWPropRECurrFin - GroupSumBudEstCurrFin) / GroupSumBudEstCurrFin) * 100) : Convert.ToDecimal(0);
                    var GroupSumPerVarACBWRevEstOverBudgEstNxtFin = GroupSumACAndBWPropRECurrFin != Convert.ToDecimal(0.00) ? Convert.ToDecimal(Convert.ToDecimal((GroupSumACAndBWPropRENxtFin - GroupSumACAndBWPropRECurrFin) / GroupSumACAndBWPropRECurrFin) * 100) : Convert.ToDecimal(0);
                    
                    <tr>
                        <td>
                            @item.GroupNo
                        </td>
                        <td>
                            @item.GroupName
                        </td>
                        <td>
                            @GroupSumBudEstCurrFin
                        </td>
                        <td>
                            @GroupSumActPrevFin
                        </td>
                        <td>
                            @GroupSumActCurrFinTill2ndQuart
                        </td>
                        <td>
                            @GroupSumRevEstCurrFin
                        </td>
                        <td>
                            @GroupSumPerVarRevEstOverBudgEstCurrFin.ToString("F2") %
                        </td>
                        @if (User.IsInRole("Admin"))
                        {
                            <td>
                                @GroupSumACAndBWPropRECurrFin
                            </td>
                        }
                        @if (User.IsInRole("Admin"))
                        {
                            <td>
                                @GroupSumPerVarACBWRevEstOverBudgEstCurrFin.ToString("F2") %
                            </td>
                        }
                        <td>
                            @GroupSumBudgEstNexFin
                        </td>
                        <td>
                            @GroupSumPerVarRevEstOverBudgEstNxtFin.ToString("F2") %
                        </td>
                        @if (User.IsInRole("Admin"))
                        {
                            <td>
                                @GroupSumACAndBWPropRENxtFin
                            </td>

                        }
                        @if (User.IsInRole("Admin"))
                        {
                            <td>
                                @GroupSumPerVarACBWRevEstOverBudgEstNxtFin.ToString("F2") %
                            </td>

                        }
                        <td>
                            @{
                               TotalAdminSavedLedgers = (from e in Model.Detailss where e.SectionNumber.Equals(@inner.SectionNo) && e.GroupNumber.Equals(@item.GroupNo) && e.HasAdminSaved.Equals(true) select e.SubGroupNumber).Count();
                                TotalDelegateSavedLedgers = (from d in Model.Detailss where d.SectionNumber.Equals(@inner.SectionNo) && d.GroupNumber.Equals(@item.GroupNo) && d.HasDelegateSaved.Equals(true) select d.SubGroupNumber).Count();
                            }
                            @if (User.IsInRole("Admin") && (TotalAdminSavedLedgers == TotalSubGroups))
                            {
                               Ready to be submitted to ChairPerson
                            
                            }
                            
                            else if (!User.IsInRole("Admin") && (TotalDelegateSavedLedgers == TotalSubGroups))
                            {
                                Ready to be submitted to AC&BW
                            }
                            else
                            {
                                Data Incomplete
                            }

                        </td>
                        @if (User.IsInRole("Admin"))
                        {
                            <td class="Remarks w-10">

                            </td>
                        }

                    </tr>
                  }
                <tr>
                    <td>
                        Total
                    </td>
                    <td>
                        Total
                    </td>

                    <td id="@Sumname1-Total">
                        @SectionSumBudEstCurrFin.ToString("F4")
                    </td>
                    <td id="@Sumname2-Total">
                        @SectionSumActPrevFin.ToString("F4")
                    </td>
                    <td id="@Sumname3-Total">
                        @SectionSumActCurrFinTill2ndQuart.ToString("F4")
                    </td>
                    <td id="@Sumname4-Total">
                        @SectionSumRevEstCurrFin.ToString("F4")
                    </td>
                    <td>
                        @SectionSumPerVarRevEstOverBudgEstCurrFin.ToString("F2") %
                    </td>
                    @if (User.IsInRole("Admin"))
                    {
                        <td>
                            @SectionSumACAndBWPropRECurrFin
                        </td>
                    }
                    @if (User.IsInRole("Admin"))
                    {
                        <td>
                            @SectionSumPerVarACBWRevEstOverBudgEstCurrFin.ToString("F2") %
                        </td>
                    }
                    <td id="@Sumname7-Total">
                        @SectionSumBudgEstNexFin.ToString("F4")
                    </td>
                    <td>
                        @SectionSumPerVarRevEstOverBudgEstNxtFin.ToString("F2") %
                    </td>
                    @if (User.IsInRole("Admin"))
                    {
                        <td>
                            @SectionSumACAndBWPropRENxtFin
                        </td>

                    }
                    @if (User.IsInRole("Admin"))
                    {
                        <td>
                            @SectionSumPerVarACBWRevEstOverBudgEstNxtFin.ToString("F2") %
                        </td>

                    }
                    @if (User.IsInRole("Admin"))
                    {
                        <td class="Remarks w-10">
                        </td>
                    }

                </tr>
        }
               
            </tbody>
         </table>
        
         @*{
              
              
              Boolean ACBWSubmission = (from a in Model.Statuss where a.SectionNumber.Equals(@inner.SectionNo)  && a.GroupNumber.Equals(@item.GroupNo) select a.ACBWSubmission).FirstOrDefault();
         }
        @if (User.IsInRole("Admin") && AdminEditStatus && (TotalAdminSavedLedgers == TotalSubGroups) && Model.IsEnabled.Equals(true) && !ACBWSubmission)
        {
            <input id="SubmitChairPerson" class="Submit" formaction="~/Tabs/Index" type="submit" value="Submit to Chairperson for Approval" style="align-self:center" />
        }
        else if (!User.IsInRole("Admin") && DelegateEditStatus && (TotalDelegateSavedLedgers == TotalSubGroups) && Model.IsEnabled.Equals(true))
        {
           <input id="SubmitACBW" class="Submit" formaction="~/Tabs/Index" type="submit" value="Submit to AC&BW for Approval" style="align-self:center" />
        }*@
   
</div>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script src="~/js/nestedtable.js"></script>
@section Scripts
{
    <script type="text/javascript">

        $(document).ready(
            function () 
            {
                onceDocReady();

                $('body').on('change', "#AcademicYear",
                    function (evt) 
                    {
                       
                            dropdownchange();
                    }
                );

                $('body').on('change', "#Division",
                    function (evt) 
                    {
                        $("#SelectedDivisionName").val($("#Division option:selected").text().trim());

                        var divisionname = $("#SelectedDivisionName").val();

                        $("#SelectedAcademicYear").val($("#AcademicYear option:selected").text().trim());

                        var academicyear = $("#SelectedAcademicYear").val();

                        var year = academicyear.split('-');

                        $.ajax
                            ({
                                type: "Get",
                                url: '@Url.Action("GetDetails","Summary")',
                                data: { Year: year[0], Division: divisionname },
                                dataType: "html",
                                success: function (data) {

                                    $("#outerdiv").html($("#outerdiv", data).html());

                                    onceDocReady();
                                },
                                error: function (jqXHR, textStatus, errorThrown) 
                                {
                                    alert("errorThrown Tabs");
                                }

                            });
                    }

                );

            });
        
        function onceDocReady() 
        {
            $("#SelectedAcademicYear").val($("#AcademicYear option:selected").text().trim());
            //alert($("#SelectedAcademicYear").val());
            $("#SelectedDivisionTypeName").val($("#DivisionType option:selected").text().trim());
            
            var academicyear = $("#SelectedAcademicYear").val();
            var DivisionTypeName = $("#SelectedDivisionTypeName").val();
            
            var year = academicyear.split('-');
            
            $(".CurrentBudgetEstimates").text('Budget Estimates ' + $("#SelectedAcademicYear").val());
            $(".PreviousActualBudget").text('Actual ' + (Number.parseInt(year[0]) - Number.parseInt(1)) + '-' + Number.parseInt(year[0]));
            $(".PreviousHalfYearActualBudget").text('Actual upto 30.09.' + Number.parseInt(year[0]));
            $(".CurrentYearRevisedEstimates").text('Revised Estimates ' + $("#SelectedAcademicYear").val());
            $(".BudgetEstimatesNextYear").text('Budget Estimates ' + Number.parseInt(year[1]) + '-' + (Number.parseInt(year[1]) + Number.parseInt(1)));
            $(".VariationInRevisedEstimates").text('% Variation in RE over the BE ' + $("#SelectedAcademicYear").val());
            $(".ACBWProposalForRevisedEstimates").text('AC & BW Proposal for RE ' + $("#SelectedAcademicYear").val());
            $(".VariationInBudgetEstimates").text('% Variation in BE ' + Number.parseInt(year[1]) + '-' + (Number.parseInt(year[1]) + Number.parseInt(1)) + 'over the RE ' + $("#SelectedAcademicYear").val());
            $(".ACBWProposalForBudgetEstimates").text('AC & BW Proposal for BE ' + Number.parseInt(year[1]) + '-' + (Number.parseInt(year[1]) + Number.parseInt(1)));
            $(".Remarks").text('Remarks');
        }

        function dropdownchange() 
        {
            $("#SelectedAcademicYear").val($("#AcademicYear option:selected").text().trim());
            var academicyear = $("#SelectedAcademicYear").val();

            $("#SelectedDivisionTypeName").val($("#DivisionType option:selected").text().trim());
            var SelectedDiv = $("#SelectedDivisionTypeName").val();
            
            var year = academicyear.split('-');

            $.ajax
                ({
                    type: "Get",
                    url: '@Url.Action("GetDetails","Summary")',
                    data: { Year: year[0], DivisionType: SelectedDiv},
                    dataType: "html",
                    success: function (data) {
                        $("#outerdiv").html($("#outerdiv", data).html());
                        onceDocReady();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("Error Thrown" + errorThrown);
                    }

                });
        }
    </script>
}